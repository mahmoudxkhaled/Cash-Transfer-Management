@page "/TransferRequest"

@layout AdminLayout

@attribute [StreamRendering]
@using System.Data;
@using My_Transfers.Models;
@inject IConfiguration configuration;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor;



@using Action = Syncfusion.Blazor.Grids.Action
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups

<h3 style="text-align:Center;  font-weight: bold;">طلبات التحويل</h3>



<SfGrid EnableRtl EnableAltRow TValue="Transfers" AllowSorting="true" GridLines="GridLine.Both" DataSource="@TransferList" @ref="TransferGrid" Toolbar=@ToolbarItems
         AllowExcelExport="true"
         AllowPdfExport="true">
     <GridPageSettings PageSize="9" />

     <GridEditSettings AllowAdding="true"
                       AllowEditing="true"
                       AllowDeleting="true"
                       Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog">

     </GridEditSettings>


     <GridEvents TValue="Transfers" OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete"></GridEvents>


     <GridColumns>
         <GridColumn Width="150px" AllowEditing="true" Field=@nameof(Transfers.TRANSFER_CODE) HeaderText="كود التحويله" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


         <GridColumn Field=@nameof(Transfers.PROJECT_ID) AllowEditing="true" Width="150px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="المشروع" EditType="EditType.DropDownEdit">

             <Template>

                 @ProjectList.FirstOrDefault(c => c.ID == (context as Transfers).PROJECT_ID)?.PROJECT_NAME

            </Template>
            <EditTemplate>

                <p style="
    font-weight: 500;
    color: ##343a40 !important;
    font-size: 13px;
    padding-right: 9px;
">المشروع</p>
                <SfDropDownList TItem="Projects" TValue="int?" PopupHeight="230px" Placeholder="اختر"
                                @bind-Value="@((context as Transfers).PROJECT_ID)" DataSource="@ProjectList">
                    <DropDownListEvents TItem="Projects" TValue="int?" />

                    <DropDownListFieldSettings Text="PROJECT_NAME" Value="ID" />
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>

        <GridColumn AllowEditing="true" Field=@nameof(Transfers.TRANSC_PURPOSE) HeaderText="غرض التحويل" Width="150px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


        <GridColumn AllowEditing="true" Field=@nameof(Transfers.CREDITOR_NAME) HeaderText="اسم الدائن" Width="150px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


        <GridColumn AllowEditing="true" Field=@nameof(Transfers.PURPOSE_REMITTANCE_INFORMATION) HeaderText="معلومات حول الغرض من التحويل" Width="300px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


        <GridColumn AllowEditing="true" Field=@nameof(Transfers.CREDITOR_ACC_TYPE) HeaderText="نوع حساب الدائن" Width="150px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>

        <GridColumn AllowEditing="true" Field=@nameof(Transfers.CREDITOR_ACC_NUM) HeaderText="رقم حساب الدائن" Width="150px" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


        <GridColumn AllowEditing="true" Field=@nameof(Transfers.AMOUNT) HeaderText="المبلغ" Width="150" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>


        <GridColumn AllowEditing="true" Field=@nameof(Transfers.DUE_DATE) Format="dd-MM-yyyy" HeaderText="تاريخ الاستحقاق" Width="150" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>

    </GridColumns>
</SfGrid>




<SfDialog Width="250px" EnableRtl ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
     <DialogTemplates>
         <Content> هل أنت متأكد أنك تريد المسح؟</Content>
     </DialogTemplates>
     <DialogButtons>
         <DialogButton Content="حسنا" IsPrimary="true" OnClick=" OkClick" />
         <DialogButton Content="الغاء" OnClick="(args) => CancelClick(args)" />
     </DialogButtons>
 </SfDialog>


 @code {



    public List<Transfers> TransferList = new List<Transfers>();
    public SfGrid<Transfers> TransferGrid = new();
    public List<Projects> ProjectList;
    public Projects CurObj = new();

    public int? DropDownValue { get; set; }

    public List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Delete" };
    public string _conStr = "";
    public List<Banks> BanksList;

    private bool IsVisible { get; set; } = false;
    private bool isConfirmed { get; set; } = false;
    public string ConStr => _conStr;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _conStr = configuration["ConnectionStrings:Connection"];

            TransferList = await RunSQL.RunSQLList<Transfers>("SELECT * FROM Transfers WHERE EMAIL_SENT = 0", _conStr);

            ProjectList = await RunSQL.RunSQLList<Projects>("SELECT * FROM PROJECTS", _conStr);
            BanksList = await RunSQL.RunSQLList<Banks>("SELECT * FROM BANKS", _conStr);

            DropDownValue = ProjectList?.FirstOrDefault(a => a.PROJECT_ID != null)?.PROJECT_ID as int?;
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during component initialization: {ex.Message}");

        }
    }




    private async Task OpenDialog()
    {

        this.IsVisible = true;
    }


    private async Task OkClick()
    {
        isConfirmed = true;
        this.IsVisible = false;
    }

    private async Task CancelClick(MouseEventArgs args)
    {
        this.IsVisible = false;

    }

    public async Task OnActionComplete(ActionEventArgs<Transfers> args)
    {
        try
        {
            if (args.RequestType.Equals(Action.Save))
            {
                int existingRecordIndex = TransferList.FindIndex(I => I.ID == args.Data.ID);

                if (existingRecordIndex != -1)
                {
                    await UpdateRecord(args.Data);
                    StateHasChanged();
                    await OnInitializedAsync();
                    _NotificationService.Notify(MessageSucces);
                }
                else
                {
                    await AddRecord(args.Data);
                    StateHasChanged();
                    await OnInitializedAsync();
                    _NotificationService.Notify(MessageSucces);
                }
            }
            else if (args.RequestType.Equals(Action.Delete))
            {
                await OpenDialog();

                while (IsVisible)
                {
                    await Task.Delay(100);

                    if (isConfirmed)
                    {
                        await DeleteRecord(args.Data);
                        StateHasChanged();
                        isConfirmed = false;
                        await OnInitializedAsync();
                        _NotificationService.Notify(MessageDelete);

                        await TransferGrid.Refresh();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during action completion: {ex.Message}");
        }
    }

    public async Task OnActionBegin(ActionEventArgs<Transfers> args)
    {
        try
        {
            if (args.RequestType.Equals(Action.Save))
            {
                int existingRecordIndex = TransferList.FindIndex(I => I.ID == args.Data.ID);

                if (existingRecordIndex != -1)
                {
                    await UpdateRecord(args.Data);
                    StateHasChanged();
                    await OnInitializedAsync();
                    _NotificationService.Notify(MessageSucces);
                }
                else
                {
                    await AddRecord(args.Data);
                    StateHasChanged();
                    await OnInitializedAsync();
                    _NotificationService.Notify(MessageSucces);
                }
            }
            else if (args.RequestType.Equals(Action.Delete))
            {
                await OpenDialog();

                while (IsVisible)
                {
                    await Task.Delay(100);

                    if (isConfirmed)
                    {
                        await DeleteRecord(args.Data);
                        StateHasChanged();
                        isConfirmed = false;
                        await OnInitializedAsync();
                        _NotificationService.Notify(MessageDelete);

                        await TransferGrid.Refresh();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during action begin: {ex.Message}");
        }
    }



    private async Task AddRecord(Transfers newTransfer)
    {
        try
        {
            string addQuery = $"INSERT INTO Transfers (TRANSFER_CODE, PROJECT_ID, DESCRIPTION, AMOUNT, DUE_DATE, CREDITOR_NAME, TRANSC_PURPOSE, PURPOSE_REMITTANCE_INFORMATION, CREDITOR_ACC_TYPE, CREDITOR_ACC_NUM) " +
                                    $"VALUES ('{newTransfer.TRANSFER_CODE}', '{newTransfer.PROJECT_ID}', '{newTransfer.DESCRIPTION}', '{newTransfer.AMOUNT}', " +
                                    $"'{newTransfer.DUE_DATE?.ToString("yyyy-MM-dd")}',' {newTransfer.CREDITOR_NAME}','{newTransfer.TRANSC_PURPOSE}', '{newTransfer.PURPOSE_REMITTANCE_INFORMATION}','{newTransfer.CREDITOR_ACC_TYPE}', '{newTransfer.CREDITOR_ACC_NUM}')";

            await RunSQL.RunSQLNonQuery(addQuery, ConStr);
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during record addition: {ex.Message}");
        }
    }


    private async Task UpdateRecord(Transfers updatedTransfer)
    {
        try
        {
            string updateQuery = $"UPDATE Transfers SET " +
                                    $"PROJECT_ID = '{updatedTransfer.PROJECT_ID}', " +
                                    $"TRANSFER_CODE = '{updatedTransfer.TRANSFER_CODE}', " +
                                    $"DESCRIPTION = '{updatedTransfer.DESCRIPTION}', " +
                                    $"AMOUNT = '{updatedTransfer.AMOUNT}', " +
                                    $"CREDITOR_NAME = '{updatedTransfer.CREDITOR_NAME}', " +
                                    $"TRANSC_PURPOSE = '{updatedTransfer.TRANSC_PURPOSE}', " +
                                    $"PURPOSE_REMITTANCE_INFORMATION = '{updatedTransfer.PURPOSE_REMITTANCE_INFORMATION}', " +
                                    $"CREDITOR_ACC_TYPE = '{updatedTransfer.CREDITOR_ACC_TYPE}', " +
                                    $"CREDITOR_ACC_NUM = '{updatedTransfer.CREDITOR_ACC_NUM}', " +
                                    $"DUE_DATE = '{updatedTransfer.DUE_DATE?.ToString("yyyy-MM-dd")}' " +
                                    $"WHERE ID = '{updatedTransfer.ID}' SELECT 'OK'";

            await RunSQL.RunSQLNonQuery(updateQuery, ConStr);
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during record update: {ex.Message}");
        }
    }

    private async Task DeleteRecord(Transfers deletedTransfer)
    {
        try
        {
            string deleteQuery = $"DELETE FROM Transfers WHERE ID = '{deletedTransfer.ID}' SELECT 'OK'";
            await RunSQL.RunSQLNonQuery(deleteQuery, ConStr);
        }
        catch (Exception ex)
        {
            _NotificationService.Notify(ErrorMSG);
            Console.WriteLine($"An error occurred during record deletion: {ex.Message}");
        }
    }

    public static readonly NotificationMessage MessageSucces =
        new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Detail = "تمت العمليه بنجاح",
                Duration = 1500,
                Style = "direction:ltr; text-align: initial;width: 222px; margin: auto;"
            };
    public static readonly NotificationMessage MessageDelete =
    new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Detail = "تم المسح بنجاح",
            Duration = 1500,
            Style = "direction:ltr; text-align: initial;width: 222px; margin: auto;"
        };

    public static NotificationMessage MessageError(string msg) =>
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Detail = msg,
                    Duration = 4000,
                    Style = "direction:ltr; text-align: initial;width: 222px; margin: auto;"
                };


    public static readonly NotificationMessage ErrorMSG =
        new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Detail = "هناك خطأ",
                Duration = 1500,
                Style = "direction:ltr; text-align: initial;width: 222px; margin: auto;"
            };
}





<style>


    .e-float-input input:focus ~ label.e-float-text, .e-float-input input:valid ~ label.e-float-text, .e-float-input input ~ label.e-label-top.e-float-text, .e-float-input input[readonly] ~ label.e-label-top.e-float-text, .e-float-input input[disabled] ~ label.e-label-top.e-float-text, .e-float-input input label.e-float-text.e-label-top, .e-float-input.e-control-wrapper input:focus ~ label.e-float-text, .e-float-input.e-control-wrapper input:valid ~ label.e-float-text, .e-float-input.e-control-wrapper input ~ label.e-label-top.e-float-text, .e-float-input.e-control-wrapper input[readonly] ~ label.e-label-top.e-float-text, .e-float-input.e-control-wrapper input[disabled] ~ label.e-label-top.e-float-text, .e-float-input.e-control-wrapper input label.e-float-text.e-label-top, .e-float-input.e-control-wrapper.e-input-focus input ~ label.e-float-text, .e-float-input.e-input-focus input ~ label.e-float-text {
        font-size: 12px;
        font-weight: 500;
        padding-right: 0;
        padding-top: 21px;
        transform: translate3d(-10px, -36px, 0) scale(1);
    }

    .e-toolbar {
        padding: 10px;
        text-align: center;
    }

    .e-grid .e-toolbar .e-tbar-btn .e-icons,
    .e-grid .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn {
        background: #add8e6;
    }

    .e-toolbar.e-control[class*=e-toolbar] {
        text-align: center;
    }

    .e-toolbar .e-tbar-btn-text, .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
        display: none;
    }

    .e-toolbar.e-rtl .e-toolbar-items:not(.e-tbar-pos) .e-toolbar-item:first-child {
        margin-left: 0;
        margin-right: 0;
    }

    .e-toolbar .e-toolbar-item .e-tbar-btn .e-icons.e-btn-icon {
        margin: 0;
        min-width: 12px;
        width: auto;
        font-size: 13px;
        line-height: 14px;
    }

    .e-grid.e-wrap .e-columnheader .e-headercelldiv, .e-grid.e-wrap .e-columnheader .e-headercell.e-fltr-icon .e-headercelldiv, .e-grid .e-columnheader.e-wrap .e-headercelldiv, .e-grid .e-columnheader.e-wrap .e-headercell.e-fltr-icon .e-headercelldiv {
        margin-bottom: 2px;
        margin-top: 0;
        margin-left: -40px;
    }

    span.e-headertext {
        margin-left: -36px;
    }
</style>